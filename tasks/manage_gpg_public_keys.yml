---

# All tasks to deploy GPG public keys

- name: 'Copy GPG public keys files from yaml'
  become: True
  become_user: "{{ item.user | default('root') }}"
  copy:
    content: "{{ item.content }}"
    dest: "{{ item.dest }}"
    mode: '0400'
  changed_when: False
  with_items: "{{ secrets_gpg_public_keys_from_yaml }}"
  when: (item.state is not defined) or (item.state == 'present')


- name: 'Copy GPG public keys files from files'
  become: True
  become_user: "{{ item.user | default('root') }}"
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: '0400'
  changed_when: False
  with_items: "{{ secrets_gpg_public_keys_from_file }}"
  when: (item.state is not defined) or (item.state == 'present')


- name: 'Import public GPG keys from temp files'
  become: True
  become_user: "{{ item.user | default('root') }}"
  import_gpg_public_key:
    import_type: 'file'
    key_path: "{{ item.dest }}"
  with_flattened:
    - "{{ secrets_gpg_public_keys_from_yaml }}"
    - "{{ secrets_gpg_public_keys_from_file }}"
  when: (item.state is not defined) or (item.state == 'present')


- name: 'Import GPG public key from keyserver using specific key servers list'
  become: True
  become_user: "{{ item.user | default('root') }}"
  import_gpg_public_key:
    import_type: 'keyserver'
    key_id: "{{ item.key_id }}"
    key_servers: "{{ item.key_servers }}"
  register: 'secrets_gpg_import_custom'
  until: secrets_gpg_import_custom is success
  retries: "{{ secrets_gpg_import_keyserver_retries }}"
  delay: "{{ secrets_gpg_import_keyserver_delay }}"
  with_items: "{{ secrets_gpg_public_keys_from_keyserver }}"
  when: item.key_servers is defined


- name: 'Import GPG public key from keyserver using default key servers list'
  become: True
  become_user: "{{ item.user | default('root') }}"
  import_gpg_public_key:
    import_type: 'keyserver'
    key_id: "{{ item.key_id }}"
    key_servers: "{{ secrets_gpg_key_servers }}"
  register: 'secrets_gpg_import_default'
  until: secrets_gpg_import_default is success
  retries: "{{ secrets_gpg_import_keyserver_retries }}"
  delay: "{{ secrets_gpg_import_keyserver_delay }}"
  with_items: "{{ secrets_gpg_public_keys_from_keyserver }}"
  when: item.key_servers is not defined


- name: 'Remove GPG public keys temp files'
  become: True
  file:
    dest: "{{ item.dest }}"
    state: 'absent'
  changed_when: False
  with_flattened:
    - "{{ secrets_gpg_public_keys_from_yaml }}"
    - "{{ secrets_gpg_public_keys_from_file }}"
  when: (item.state is not defined) or (item.state == 'present')


- name: 'Remove GPG public keys'
  become: True
  become_user: "{{ item.user | default('root') }}"
  remove_gpg_key:
    key_type: 'public'
    key_id: "{{ item.key_id }}"
  with_items: "{{ secrets_gpg_public_keys_to_remove }}"
  when: item.key_id is defined
